plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
}

group '_08final.mvc.model'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.7' // Puedes usar la última versión de Jacoco aquí
    // Configura el destino de los informes de cobertura
    reportsDir = file("$buildDir/jacoco")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task generateJacocoReport(type: JacocoReport, dependsOn: ['test']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def coverageSourceDirs = [
            'src/main/java', // Directorios fuente de producción
            'src/main/kotlin', // Directorios fuente de producción (si usas Kotlin)
    ]
    sourceDirectories.setFrom(files(coverageSourceDirs))
    classDirectories.setFrom(files("build/classes/java/main"))
    executionData.setFrom(files("build/jacoco/test.exec"))
}

task checkCoverage {
    dependsOn generateJacocoReport
    doLast {
        def minCoverage = 0.05 // Cambia este valor al umbral mínimo que deseas
        def jacocoReport = file("$buildDir/reports/jacoco/test/html/index.html")
        def coverageLine = jacocoReport.text.findAll(/Total[^<]+/)[0]
        def coverage = (coverageLine =~ /(\d+\.\d+)%/)[0][1] as Double

        if (coverage < minCoverage) {
            throw new GradleException("La cobertura de código actual ($coverage%) es menor que el umbral mínimo ($minCoverage%)")
        } else {
            println "Cobertura de código actual: $coverage%"
        }
    }
}
